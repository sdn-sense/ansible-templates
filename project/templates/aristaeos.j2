#jinja2: lstrip_blocks: "True", trim_blocks: "True"
{##########################################
#Purpose:
#Configure VLAN Interface commands for arista eos Devices
#interface:
#  Vlan1798:
#    description: urn:ogf:network:service+8791cc78-e68c-4d52-9b7c-3c6f3e9d2795:resource+links::Connection_1
#    ipv4_address: {10.251.85.2/24: present}
#    ipv6_address: {'fc00:0:0:0:0:0:0:16/124': present}
#    name: Vlan1798
#    vlanid: 1798
#    state: present
#    tagged_members:
#      Ethernet31/1: present
#      Ethernet30/1: present
#########################################}
{% if interface is defined and interface %}
  {% for key,value in interface.items() %}
    {% set vlan_vars = interface[key] %}
    {% if vlan_vars.state is defined and vlan_vars.state == "absent" %}
no vlan {{ vlan_vars.vlanid }}
no interface Vlan {{ vlan_vars.vlanid }}
      {% if vlan_vars.tagged_members is defined %}
        {% for key, val in vlan_vars.tagged_members.items() %}
interface {{ key }}
 switchport trunk allowed vlan remove {{ vlan_vars.vlanid }}
        {% endfor %}
      {% endif %}
    {% else %}
vlan {{ vlan_vars.vlanid }}
interface Vlan {{ vlan_vars.vlanid }}
      {% if vlan_vars.description is defined %}
        {% if vlan_vars.description %}
 description {{ vlan_vars.description }}
        {% else %}
 no description
        {% endif %}
      {% endif %}
      {% if vlan_vars.ipv4_address is defined %}
        {% set ip_vars = vlan_vars.ipv4_address %}
        {% for key, value in ip_vars.items() %}
          {% if value == "absent" %}
 no ip address {{ key }}
          {% else %}
 ip address {{ key }}
          {% endif %}
        {% endfor %}
      {% endif %}
      {% if vlan_vars.ipv6_address is defined %}
        {% set ip_vars = vlan_vars.ipv6_address %}
        {% for key, value in ip_vars.items() %}
          {% if value == "absent" %}
 no ipv6 address {{ key }}
          {% else %}
 ipv6 address {{ key }}
          {% endif %}
        {% endfor %}
      {% endif %}
      {% if vlan_vars.tagged_members is defined %}
        {% for key, val in vlan_vars.tagged_members.items() %}
          {% if val == "absent" %}
interface {{ key }}
 switchport trunk allowed vlan remove {{ vlan_vars.vlanid }}
            {% else %}
interface {{ key }}
 switchport trunk allowed vlan add {{ vlan_vars.vlanid }}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% endif %}
  {% endfor %}
{% endif %}

{# Configure quality of Service #}
{##########################################
#Purpose:
#Configure QoS commands for arista eos Devices
# Examples below of configuration passed by the RM to create QoS policies
qos:
  Ethernet12-1-3616:
    burst_size: 256
    max_rate: 50000
    min_rate: 50000
    port: Ethernet12/1
    qosname: guaranteedCapped
    qosnumber: 7
    state: present
    unit: mbit
    vlan: 3616
  Port-Channel502-3616:
    burst_size: 256
    max_rate: 50000
    min_rate: 50000
    port: Port-Channel502
    qosname: guaranteedCapped
    qosnumber: 7
    state: present
    unit: mbit
    vlan: 3616
#########################################}
{% if qos is defined and qos %}
{% set present_qos = [] %}
{% set absent_qos = [] %}
{% set configured_interfaces = [] %}

{% for key, value in qos.items() %}
  {% if value.state == "present" %}
    {% set _ = present_qos.append(value) %}
  {% elif value.state == "absent" %}
    {% set _ = absent_qos.append(value) %}
  {% endif %}
{% endfor %}

{% for item in absent_qos %}
no class-map type qos match-any VLAN{{ item.vlan }}
{% endfor %}

{% for item in absent_qos %}
policy-map type quality-of-service SENSE_QOS
 no class VLAN{{ item.vlan }}
exit
{% endfor %}

{% set configured_classes = [] %}
{% for item in present_qos %}
  {% if item.vlan not in configured_classes %}
    {% set _ = configured_classes.append(item.vlan) %}
class-map type qos match-any VLAN{{ item.vlan }}
 match vlan {{ item.vlan }}
exit
  {% endif %}
{% endfor %}

{% set configured_policies = [] %}
{% for item in present_qos %}
  {% if item.vlan not in configured_policies %}
    {% set _ = configured_policies.append(item.vlan) %}
policy-map type quality-of-service SENSE_QOS
 class VLAN{{ item.vlan }}
  set traffic-class {{ item.qosnumber }}
    {% if item.qosname == "guaranteedCapped" %}
  police rate {{ item.min_rate}} mbps burst-size {{ item.burst_size }} mbytes
    {% else %}
  police rate {{ item.min_rate }} mbps burst-size {{ item.burst_size }} mbytes action set drop-precedence rate {{ item.max_rate }} mbps burst-size {{ item.burst_size }} mbytes
    {% endif %}
 exit
exit
  {% endif %}
{% endfor %}

{% for item in present_qos %}
  {% if item.port not in configured_interfaces %}
    {% set _ = configured_interfaces.append(item.port) %}
interface {{ item.port }}
 service-policy type qos input SENSE_QOS
  {% endif %}
{% endfor %}

{% endif %}