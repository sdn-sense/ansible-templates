#jinja2: lstrip_blocks: "True", trim_blocks: "True"
{##########################################
#Purpose:
#Configure VLAN Interface commands for CiscoNX Devices
ansible_become: false
ansible_network_os: sense.cisconx9.cisconx9
ansible_ssh_pass: SuperDuperPassword
ansible_ssh_user: SuperDuperUsername
hostname: cisconx_s0
interface:
  Vlan 3607:
    description: urn:ogf:network:service+858b5c37-5af7-4e8a-9dc7-747abb7e0928:vt+l2-policy::Connection_1
    ipv6_address: {'fc00:0:0:0:0:0:0:16/124': present}
    name: Vlan 3607
    vlanid: 3607
    state: present
    tagged_members: {hundredGigE 1/7: present}
    vrf: lhcone
sense_bgp:
  asn: '64513'
  ipv6_network: {'2605:d9c0:2:fff1::/64': present}
  neighbor:
    ipv6:
      fc00:0:0:0:0:0:0:17/124:
        remote_asn: '65000'
        route_map:
          in: {sense-f20aa5a51d2ab2fc9e5182621d00abd3-mapin: present}
          out: {sense-f20aa5a51d2ab2fc9e5182621d00abd3-mapout: present}
        state: present
  prefix_list:
    ipv4: {}
    ipv6:
      2001:48d0:3001:110::/64: {sense-f20aa5a51d2ab2fc9e5182621d00abd3-from: present}
      2605:d9c0:2:fff1::/64: {sense-f20aa5a51d2ab2fc9e5182621d00abd3-to: present}
  route_map:
    ipv6:
      sense-f20aa5a51d2ab2fc9e5182621d00abd3-mapin: {sense-f20aa5a51d2ab2fc9e5182621d00abd3-from: present}
      sense-f20aa5a51d2ab2fc9e5182621d00abd3-mapout: {sense-f20aa5a51d2ab2fc9e5182621d00abd3-to: present}
  state: present
  vrf: lhcone
#########################################}
{% if interface is defined and interface %}
{% for key, vlan_vars in interface.items() %}
  {% if vlan_vars.state is defined and vlan_vars.state == "absent" %}
no vlan {{ vlan_vars.vlanid }}
no interface Vlan{{ vlan_vars.vlanid }}
  {% else %}
vlan {{ vlan_vars.vlanid }}
interface Vlan{{ vlan_vars.vlanid }}
    {% if vlan_vars.mtu is defined %}
 mtu {{ vlan_vars.mtu }}
    {% endif %}
    {% if vlan_vars.vrf is defined %}
 vrf member {{ vlan_vars.vrf }}
    {% endif %}
    {% if vlan_vars.description is defined and vlan_vars.description %}
 description {{ vlan_vars.description }}
    {% else %}
 no description
    {% endif %}
    {% if vlan_vars.ipv4_address is defined %}
      {% set ip_vars = vlan_vars.ipv4_address %}
      {% for key, value in ip_vars.items() %}
        {% if value == "absent" %}
 no ip address {{ key }}
        {% else %}
 ip address {{ key }}
        {% endif %}
      {% endfor %}
    {% endif %}
    {% if vlan_vars.ipv6_address is defined %}
      {% set ip_vars = vlan_vars.ipv6_address %}
      {% for key, value in ip_vars.items() %}
        {% if value == "absent" %}
 no ipv6 address {{ key }}
        {% else %}
 ipv6 address {{ key }}
        {% endif %}
      {% endfor %}
    {% endif %}
 no shutdown
  {% endif %}
  {% if vlan_vars.tagged_members is defined %}
    {% for key, val in vlan_vars.tagged_members.items() %}
      {% if val == "absent" %}
interface {{ key }}
 switchport trunk allowed vlan remove {{ vlan_vars.vlanid }}
      {% elif vlan_vars.state is defined and vlan_vars.state == "absent" %}
interface {{ key }}
 switchport trunk allowed vlan remove {{ vlan_vars.vlanid }}
      {% else %}
interface {{ key }}
 switchport trunk allowed vlan add {{ vlan_vars.vlanid }}
      {% endif %}
    {% endfor %}
  {% endif %}
{% endfor %}
{% endif %}

{% if sense_bgp is defined and sense_bgp %}
{% set bgp = sense_bgp %}
{# Apply bgp prefix list #}
  {% if bgp.prefix_list is defined and bgp.prefix_list %}
    {% for iptype, vals in bgp.prefix_list.items() %}
      {% set ipname = 'ip' %}
      {% if iptype == "ipv6" %}
        {% set ipname = 'ipv6' %}
      {% endif %}
      {% if vals %}
        {% for prefip, prefdict in vals.items() %}
          {% if prefdict %}
            {% for prefname, prefstate in prefdict.items() %}
              {% if prefstate == "absent" %}
no {{ ipname }} prefix-list {{ prefname }}
              {% endif %}
              {% if prefstate == "present" %}
{{ ipname }} prefix-list {{ prefname }} permit {{ prefip }}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% endfor %}
  {% endif %}
{# Apply bgp route maps list #}
  {% if bgp.route_map is defined and bgp.route_map %}
    {% for iptype, vals in bgp.route_map.items() %}
      {% set ipname = 'ip' %}
      {% if iptype == "ipv6" %}
        {% set ipname = 'ipv6' %}
      {% endif %}
      {% if vals %}
        {% for rmapname, rmapdict in vals.items() %}
          {% if rmapdict %}
            {% for permitval , routes in rmapdict.items() %}
              {% for routename, routestate in routes.items() %}
                {% if routestate == "absent" %}
no route-map {{ rmapname }} permit {{ permitval }}
                {% endif %}
                {% if routestate == "present" %}
route-map {{ rmapname }} permit {{ permitval }}
 match {{ ipname }} address prefix-list {{ routename }}
                {% endif %}
              {% endfor %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% endfor %}
  {% endif %}
{# Apply all IPv6 Router config #}
  {% if bgp.asn is defined and bgp.asn %}
    {% if bgp.state is defined and bgp.state == "present" %}
router bgp {{ bgp.asn }}
      {% set addr_fam_v6 = "address-family ipv6 unicast" %}
{# In Future apply using VRF if VRF is needed #}
      {% if bgp.ipv6_network is defined and bgp.ipv6_network %}
 {{ addr_fam_v6 }}
        {% for key, val in bgp.ipv6_network.items() %}
          {% if val == "absent" %}
  no network {{ key }}
          {% else %}
  soft-reconfiguration inbound
  network {{ key }}
          {% endif %}
        {% endfor %}
      {% endif %}
      {% if bgp.neighbor is defined and bgp.neighbor %}
        {% if bgp.neighbor.ipv6 is defined and bgp.neighbor.ipv6 %}
          {% for key, val in bgp.neighbor.ipv6.items() %}
            {% set neighIP = key.split("/")[0] %}
            {% if val.remote_asn is defined and val.remote_asn %}
              {% if val.state is defined and val.state != "absent" %}
  neighbor {{ neighIP }} remote-as {{ val.remote_asn }}
                {% if val.route_map is defined and val.route_map %}
    {{ addr_fam_v6 }}
                  {% for direc, vals in val.route_map.items() %}
                    {% for name, state in vals.items() %}
                      {% if state != "absent" %}
      route-map {{ name }} {{ direc }}
                      {% endif %}
                    {% endfor %}
                  {% endfor %}
                {% endif %}
              {% endif %}
            {% endif %}
          {% endfor %}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}
{% endif %}
